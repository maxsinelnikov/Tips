#-------    Работа с проектом находящимся на локальной машине   -------#

git bash			# Windows git терминал

cd disk:/path/to/project	# выбор рабочего каталога

init				# инициализация папки для проекта

status				# информация о проекте, различии между
				  work, stage и repo ветками 

HEAD				# текущий commit

add <file>			# добавление файлов в буфер stage,
				  индексация измененных файлов
    < . > или --all		# всех файлов из папки

reset <commit> <file>		# отмена изменений 
    HEAD <file>			# отмена добавления в stage уровень
    --soft <commit hash>	# переносит HEAD на заданную точку
    --mixed <commit hash>	# + откатывает stage буфер 
    --hard <commit hash>	# + откатывает рабочюю директорию 

rm <file>			# убрать отслеживание(удаление файла)
    --cached			# удалить только из буфера stage

mv <file1> <file2>		# перемещение(переименование) файла

commit				# сохранение проиндексированных файлов
    -m "comment"		# добавление комментария
    -a				# напрямую, без буфера stage, с новыми
				  и удаленными файлами не работает
    --amend -m "comment"	# изменение последнего(HEAD) commit

revert <commit hash>		# противополжность действию commit
    -in				# отправится в буфер

clean				# удаление неотслеживаемых файлов
    -m				# тестовый запуск
    -f				# само удаление


#-------    Работа с проектом из удаленного репозитория GitHub  -------#

remote				# работа с удаленным сервером
    add origin <link>		# отслеживать репозиторий на сервере

push				# отправить данные в репозиторий
    -u origin master		# выбор ветки пользователя

clone <link.git> <path>		# клонирование репозитория в папку
 
checkout 			# использовать файлы из репозитория
    <commit hash>		# если интересует конкретный commit,
				  файл попадает в буфер stage
    <branch> 			# выбор <branch>( -- текущий branch)
    <file>			# использовать конкретный <file>


log				# вывод списка изменений
    --all			# все ветки
    -n <int>			# вывести <int> последних commits
    -p				# вывод изменений
    --since=yyyy-mm-dd		# начиная с даты
    --until=3.weeks		# заканчивая датой
    --author			# определенный автор
    --grep="re"			# содержит фразу "re"
    --graph			# в графическом представлении
    --decorate			# добавить декорирование
    --oneline			# одностроковый вывод
    HEAD			# указатель на посл. commit в branch

show <commit>			# полная информация по <commit>

diff 				# сравнить рабочую папку и буфер 
    <filename>			# конкретного файла
    --staged 			# сравнить буфер и репозиторий
    --color-words		# изменения отображаются рядом
    <commit1>..<commit2>	# разница между двумя коммитами
    <commit1>..HEAD		# разница до текущего состояния
    --stat --summary		# вывод статистики изменений
    -b -w			# изменение пробелов не считаются



app/.gitignore			# файл со списком игнорирования
    re:  ? * [a-z] 		# поддежка re выражений в файле
    !<file>			# правило кроме файла <file>
    dir/*.*			# игнорировать файлы! из директории dir
    #comment			# формат комментария


#--------       Работа с разветвлениями проекта(branches)       -------#
branch				# информация о разветвлениях проекта
    <branch>			# создание ветки <branch>
    --merged			# какие родители текущего branch
    -m --move <old> <new>	# перенос или переименование branch
    -d --delee <branch>		# удаление неактивного branch
    -D				# удаление без проверок на уникальность

checkout <branch> 		# выбор <branch>
    -b				# создать если не существует

diff <branch1>..<branch2>	# разница между branches

merge <branch>			# слияние текущей ветки с <branch>
    --no-ff			# в новый commit
    --ff-only			# только быстрое слияние


 





