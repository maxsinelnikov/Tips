sudo apt install docker.io

# Создание группы docker с правами суперпользователя
sudo usermod -aG docker username
----------------------------------------------------------------------
docker info			# информация о версии Docker
----------------------------------------------------------------------
sudo service docker restart	# Перезапуск docker
======================================================================
search IMAGE			# поиск образа IMAGE
----------------------------------------------------------------------
pull IMAGE			# Скачивание образа IMAGE из DockerHub
----------------------------------------------------------------------
create IMAGE			# создать контейнер, но не запускать
----------------------------------------------------------------------
# Запуск контейнера с образом IMAGE
run [OPTIONS] IMAGE[:TAG] [COMMAND] [ARG...]

    -i -t -it			# интерактивный режим в терминале

    -h --hostname HOST		# задать имя хоста

    --name NAME			# задать имя контейнера

    -d				# запуск в фоновом режиме

    -p 80:80 -p 443:443		# проброс порта из хостa в контейнер

    -e	IMAGE_VAR=VALUE		# проброс переменной окружения
    
    bash [COMMAND]		# выход по exit

    --rm			# уничтожается при выходе

    --link name:alias		# установка связи между контейнерами

    -P

    -v /host/folder:/server	# подключение тома `pwd`:/

----------------------------------------------------------------------
stop CONTAINER			# остановка контейнера
----------------------------------------------------------------------
start CONTAINER			# запуск остановленного контейнера
----------------------------------------------------------------------
restart	CONTAINER		# перезапустить контейнер 
----------------------------------------------------------------------
rm CONTAINER_ID 1,2,3		# Удаление контейнеров
----------------------------------------------------------------------
rm $(docker ps -aq)		# Remove all containers. 
----------------------------------------------------------------------
kill CONTAINER			# отправить сигнал SIGKILL контейнеру 
----------------------------------------------------------------------
attach CONTAINER		# подключиться к online контейнеру 
----------------------------------------------------------------------
wait CONTAINER			# блокировать команду и ждать, пока 
				  контейнер не остановится
----------------------------------------------------------------------
inspect CONTAINER		# вывод конфигурации контейнера в JSON
    -f '{{ ARG }}'		# конкретную часть
    | grep ARG			# отфильтрованная по ARG
----------------------------------------------------------------------
inspect -f {{.Mounts}} CONTAIN	# список томов контейнера
----------------------------------------------------------------------
history				# список изменений в образе
----------------------------------------------------------------------
ps				# вывод списка контейнеров
    -a				# включая остановленные
    -aq -f status=exited	# удаление остановленных контейнеров
----------------------------------------------------------------------
logs				# вывод контейнера, -f в режиме tail
----------------------------------------------------------------------
events				# показать события контейнера 
----------------------------------------------------------------------
port				# открытые наружу порты контейнера 
----------------------------------------------------------------------
top				# процессы, работающие в контейнере 
----------------------------------------------------------------------
stats				# статистика использования ресурсов
----------------------------------------------------------------------
diff CONTAINER			# список изменений в контейнере
----------------------------------------------------------------------
exec -it CONTAINER bash		# запуск консоли для отладки.
----------------------------------------------------------------------
cp /host/path:server/path	# copies files or folders out of
----------------------------------------------------------------------
export				# STDOUT. 
======================================================================
# Создание образа приложения из Dockerfile
build [OPTIONNS] [DOCKERFILE]

    -t REPOSITORY/IMAGE	# задание имени образа

    --nocache			# игнорирование кэша ранних сборок

    [DOCKERFILE]		# путь к Dockerfile  < . > или из git

----------------------------------------------------------------------
commit CONTAIN REPOSITORY/IMAGE	# Создание образа из контейнера NAME
----------------------------------------------------------------------
push REPOSITORY/IMAGE[:TAG]	# запись образа в облако
   
    :latest			# [:TAG] по умолчанию

----------------------------------------------------------------------
save IMAGE > ~/transfer.tar	#
----------------------------------------------------------------------
load < /tmp/transfer.tar	#
----------------------------------------------------------------------
images				# список образов
----------------------------------------------------------------------
ln -s				# символьная ссылка
----------------------------------------------------------------------















